

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://thsgood20.github.io</id>
  <title>L.KK</title>
  <subtitle>NSObject,IOS,Developer.</subtitle>
  <updated>2021-01-26T13:38:21+08:00</updated>
  <author>
    <name>thsgood20</name>
    <uri>https://thsgood20.github.io</uri>
  </author>
  <link href="/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://thsgood20.github.io" rel="alternate" type="text/html" />
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 thsgood20 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>NSObject alloc实现</title>
    <link href="https://thsgood20.github.io/posts/alloc%E5%AE%9E%E7%8E%B0/" rel="alternate" type="text/html" title="NSObject alloc实现" />
    <published>2021-01-25T20:45:45+08:00</published>
  
    <updated>2021-01-25T20:45:45+08:00</updated>
  
    <id>https://thsgood20.github.io/posts/alloc%E5%AE%9E%E7%8E%B0/</id>
    <content src="https://thsgood20.github.io/posts/alloc%E5%AE%9E%E7%8E%B0/" />
    <author>
      <name>thsgood20</name>
    </author>

  
    
    <category term="blog" />
    
    <category term="IOS" />
    
  

  
    <summary>
      





      有两种alloc实现


  
    GNUstep(Cocoa互换框架 )

    NSZone是为了防止内存碎片化而引入的结构,通过使用对象的目的,对象大小分配内存,提高效率.苹果官方文档说明, 现在的运行时系统内存管理已极具效率,使用NSZone反而效率低下源码复杂.

    alloc简化版,引用计数信息写入对象内存头部

    struct obj_layout{
NSUinteger retained;
};
+(id)alloc{
int size = sizeof(stuct obj_layout)+对象大小
struct obj_layout *p = (struct obj_layout*) calloc(1,size);
return(id)(p+1);
}
-(void)release{
if(decrementeExtraRefCountWasZer...
    </summary>
  

  </entry>

</feed>


