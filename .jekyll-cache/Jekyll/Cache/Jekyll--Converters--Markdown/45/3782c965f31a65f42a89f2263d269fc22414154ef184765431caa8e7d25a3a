I"y)<p>有两种alloc实现</p>

<ol>
  <li>
    <p>GNUstep(Cocoa互换框架 )</p>

    <p>NSZone是为了防止内存碎片化而引入的结构,通过使用对象的目的,对象大小分配内存,提高效率.苹果官方文档说明, 现在的运行时系统内存管理已极具效率,使用NSZone反而效率低下源码复杂.</p>

    <p>alloc简化版,引用计数信息写入对象内存头部</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="k">struct</span> <span class="n">obj_layout</span><span class="p">{</span>
<span class="n">NSUinteger</span> <span class="n">retained</span><span class="p">;</span>
<span class="p">};</span>
<span class="o">+</span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="n">alloc</span><span class="p">{</span>
<span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">stuct</span> <span class="n">obj_layout</span><span class="p">)</span><span class="o">+</span><span class="err">对象大小</span>
<span class="k">struct</span> <span class="n">obj_layout</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">obj_layout</span><span class="o">*</span><span class="p">)</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">size</span><span class="p">);</span>
<span class="k">return</span><span class="p">(</span><span class="n">id</span><span class="p">)(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
<span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">release</span><span class="p">{</span>
<span class="k">if</span><span class="p">(</span><span class="n">decrementeExtraRefCountWasZero</span><span class="p">(</span><span class="n">self</span><span class="p">))</span>
    <span class="p">[</span><span class="n">self</span> <span class="n">dealloc</span><span class="p">];</span>
<span class="p">}</span>
<span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">dealloc</span><span class="p">{</span>
<span class="k">struct</span> <span class="n">obj_layout</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span> <span class="p">((</span><span class="k">struct</span> <span class="n">obj_layout</span> <span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
<span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>Q:当retained变量超出最大值时会发生什么? 
A:retain方法会抛出异常</p>
  </li>
  <li>
    <p>Apple实现</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="rouge-code"><pre>  <span class="k">static</span> <span class="k">struct</span> <span class="p">{</span>
 <span class="n">CFSpinLock_t</span> <span class="n">lock</span><span class="p">;</span>
 <span class="n">CFBasicHashRef</span> <span class="n">table</span><span class="p">;</span>
 <span class="kt">uint8_t</span> <span class="n">padding</span><span class="p">[</span><span class="mi">64</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CFBasicHashRef</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CFSpinLock_t</span><span class="p">)];</span>
<span class="p">}</span> <span class="n">__NSRetainCounters</span><span class="p">[</span><span class="n">NUM_EXTERN_TABLES</span><span class="p">];</span>
<span class="n">CF_EXPORT</span> <span class="kt">uintptr_t</span> <span class="nf">__CFDoExternRefOperation</span><span class="p">(</span><span class="kt">uintptr_t</span> <span class="n">op</span><span class="p">,</span> <span class="n">id</span> <span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
 <span class="k">if</span> <span class="p">(</span><span class="n">nil</span> <span class="o">==</span> <span class="n">obj</span><span class="p">)</span> <span class="n">HALT</span><span class="p">;</span>
 <span class="kt">uintptr_t</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">EXTERN_TABLE_IDX</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
 <span class="kt">uintptr_t</span> <span class="n">disguised</span> <span class="o">=</span> <span class="n">DISGUISE</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
 <span class="n">CFSpinLock_t</span> <span class="o">*</span><span class="n">lock</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">__NSRetainCounters</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">lock</span><span class="p">;</span>
 <span class="n">CFBasicHashRef</span> <span class="n">table</span> <span class="o">=</span> <span class="n">__NSRetainCounters</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">table</span><span class="p">;</span>
 <span class="kt">uintptr_t</span> <span class="n">count</span><span class="p">;</span>
 <span class="k">switch</span> <span class="p">(</span><span class="n">op</span><span class="p">)</span> <span class="p">{</span>
 <span class="k">case</span> <span class="mi">300</span><span class="p">:</span>   <span class="c1">// increment</span>
 <span class="k">case</span> <span class="mi">350</span><span class="p">:</span>   <span class="c1">// increment, no event</span>
     <span class="n">__CFSpinLock</span><span class="p">(</span><span class="n">lock</span><span class="p">);</span>
 <span class="n">CFBasicHashAddValue</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="n">disguised</span><span class="p">,</span> <span class="n">disguised</span><span class="p">);</span>
     <span class="n">__CFSpinUnlock</span><span class="p">(</span><span class="n">lock</span><span class="p">);</span>
     <span class="k">if</span> <span class="p">(</span><span class="n">__CFOASafe</span> <span class="o">&amp;&amp;</span> <span class="n">op</span> <span class="o">!=</span> <span class="mi">350</span><span class="p">)</span> <span class="n">__CFRecordAllocationEvent</span><span class="p">(</span><span class="n">__kCFObjectRetainedEvent</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
     <span class="k">return</span> <span class="p">(</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">obj</span><span class="p">;</span>
 <span class="k">case</span> <span class="mi">400</span><span class="p">:</span>   <span class="c1">// decrement</span>
     <span class="k">if</span> <span class="p">(</span><span class="n">__CFOASafe</span><span class="p">)</span> <span class="n">__CFRecordAllocationEvent</span><span class="p">(</span><span class="n">__kCFObjectReleasedEvent</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
 <span class="k">case</span> <span class="mi">450</span><span class="p">:</span>   <span class="c1">// decrement, no event</span>
     <span class="n">__CFSpinLock</span><span class="p">(</span><span class="n">lock</span><span class="p">);</span>
     <span class="n">count</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">CFBasicHashRemoveValue</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="n">disguised</span><span class="p">);</span>
     <span class="n">__CFSpinUnlock</span><span class="p">(</span><span class="n">lock</span><span class="p">);</span>
     <span class="k">return</span> <span class="mi">0</span> <span class="o">==</span> <span class="n">count</span><span class="p">;</span>
 <span class="k">case</span> <span class="mi">500</span><span class="p">:</span>
     <span class="n">__CFSpinLock</span><span class="p">(</span><span class="n">lock</span><span class="p">);</span>
     <span class="n">count</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">CFBasicHashGetCountOfKey</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="n">disguised</span><span class="p">);</span>
     <span class="n">__CFSpinUnlock</span><span class="p">(</span><span class="n">lock</span><span class="p">);</span>
     <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
 <span class="p">}</span>
 <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ol>

<p>__CFDoExternRefOperation 按照retainCount/retain/release 调用不同的函数
alloc通过多个散列表来管理引用计数,对每个引用计数表的访问都需要配合spinlock.</p>

<ol>
  <li>
    <p>GNUstep实现简单高效,代码少</p>

    <p>苹果实现 内存块无需考虑头部(不需要进行指针地址偏移), 可以通过引用计数表查到内存块.  这样即使对象内存块损坏, 只要引用计数表没有被破话, 就能够确认内存块位置; <strong><em>在检测内存泄漏时,有助于检测各对象的持有者是否存在.</em></strong></p>
  </li>
</ol>

:ET